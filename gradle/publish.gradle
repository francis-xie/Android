//apply plugin: 'maven'
//==============================JitPack 上传插件配置=====================
apply plugin: 'com.github.dcendents.android-maven'

//加载本地maven私服配置（在工程根目录中的local.properties文件中进行配置）
//group和version的定义会被使用，作为maven库坐标的一部分
//group会被作为坐标的groupId，version会被作为坐标的version，而坐标的artifactId组成即module名
version = VERSION_NAME //version是该library的版本号
group = GROUP //group意味着创建该library的组织名，通常这会是包名

def debug_flag = true //true: 发布到本地maven仓库， false： 发布到maven私服
def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

def configurePom(pom) {
    pom.groupId = GROUP
    pom.artifactId = POM_ARTIFACT_ID
    pom.version = VERSION_NAME
    // 生成pom.xml和参数
    pom.project {
        name POM_NAME // 可选，项目名称（name是该library的唯一标示）。
        packaging POM_PACKAGING // 项目的打包类型：pom、jar、war
        description POM_DESCRIPTION // 可选，项目描述。
        url POM_URL // 项目主页，这里是引用上面定义好。
        // SCM
        scm {
            url POM_SCM_URL // 项目主页。
            connection POM_SCM_CONNECTION // Git仓库地址。
            developerConnection POM_SCM_DEV_CONNECTION // Git仓库地址。
        }
        // 软件开源协议，现在一般都是Apache License2.0吧
        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }
        //填写开发者基本信息
        developers {
            developer {
                id POM_DEVELOPER_ID // 开发者的id。
                name POM_DEVELOPER_NAME // 开发者名字。
                //email POM_DEVELOPER_EMAIL // 开发者邮箱。
            }
        }
    }
}

afterEvaluate { project ->
    //发布到仓库
    uploadArchives {
        repositories {
            //deploy到maven仓库
            mavenDeployer {
                if (debug_flag) { //deploy到本地仓库
                    //maven本地仓库的目录就是当前项目目录下的repo-local目录
                    repository(url: uri('../LocalRepository'))
                    //repository(url: uri('../repo-local'))
                } else {//deploy到maven私服中
                    //beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                    snapshotRepository(url: getSnapshotRepositoryUrl()) {
                        authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                    }
                }
                configurePom(pom)
            }
        }
    }

    tasks.create("installLocally", Upload) {
        configuration = configurations.archives

        repositories {
            mavenDeployer {
                repository(url: "file://${rootProject.buildDir}/localMaven")

                configurePom(pom)
            }
        }
    }

    if (project.getPlugins().hasPlugin('com.android.application') ||
            project.getPlugins().hasPlugin('com.android.library')) {
        task install(type: Upload, dependsOn: assemble) {
            repositories.mavenInstaller {
                configuration = configurations.archives

                configurePom(pom)
            }
        }

        task androidJavadocs(type: Javadoc) {
            source = android.sourceSets.main.java.source
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }

        task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
            classifier = 'javadoc'
            from androidJavadocs.destinationDir
        }

        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.source
        }
    } else {
        install {
            repositories.mavenInstaller {
                configurePom(pom)
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn:javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }

    artifacts {
        if (project.getPlugins().hasPlugin('com.android.application') ||
                project.getPlugins().hasPlugin('com.android.library')) {
            archives androidSourcesJar
            archives androidJavadocsJar
        } else {
            archives sourcesJar
            archives javadocJar
        }
    }
}

// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，
// 所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。
//Properties properties = new Properties()
//properties.load(project.rootProject.file('local.properties').newDataInputStream())
//bintray {
//    user = properties.getProperty("bintray.user") // Bintray的用户名。
//    key = properties.getProperty("bintray.apikey") // Bintray刚才保存的ApiKey。
//
//    configurations = ['archives']
//    pkg {
//        repo = "android"  // 上传到maven库。（这里要特别注意，如果写了maven报404错误，请在bintray创建一个仓库，这里填改成你创建的仓库的名字，如何创建请看下图。）
//        name = "AutoRegister"  // 发布到Bintray上的项目名字，这里的名字不是compile 'com.yanzhenjie:andserver:1.0.1'中的andserver。
//        userOrg = properties.getProperty("bintray.userOrg") // Bintray的用户名，2016年11月更新。
//        websiteUrl = POM_URL
//        vcsUrl = GIT_URL
//        licenses = ["Apache-2.0"]
//        publish = true // 是否是公开项目。
//    }
//}